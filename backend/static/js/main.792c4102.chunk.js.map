{"version":3,"sources":["loading.gif","peel.png","ImageUploader/IMG.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","IMG","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","file","imagePreviewUrl","e","_this2","preventDefault","formData","FormData","console","log","append","substr","name","agent","https","Agent","rejectUnauthorized","axios","method","url","httpsAgent","data","then","res","setRipe","catch","err","warn","fileToBeSent","post","_this3","target","files","reader","FileReader","onloadend","setState","result","readAsDataURL","loading","_handleSubmit","_this4","$imagePreview","react_default","a","createElement","className","src","alt","onSubmit","style","display","type","onChange","_handleImageChange","ref","fileInput","onClick","click","_handleFindRipeness","Component","App","setRipeness","num","ripeness","setLoading","_loadingImage","require","displayInformation","mainText","image","bind","assertThisInitialized","src_ImageUploader_IMG","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.792c4102.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.edf4241f.gif\";","module.exports = __webpack_public_path__ + \"static/media/peel.a1947dbf.png\";","import React, { Component } from 'react'\nimport './IMG.css'\nimport axios from 'axios'\nimport https from 'https'\n\nclass IMG extends Component {\n  constructor(props) {\n    super(props)\n    this.state = { \n      file: '', \n      imagePreviewUrl: '' \n    }\n  }\n\n  _handleSubmit(e) {\n    e.preventDefault();\n    let file = this.state.imagePreviewUrl;\n    const formData = new FormData();\n    console.log(file);\n\n    formData.append(\"fileData\", file.substr(23));\n    formData.append(\"fileName\", this.state.file.name)\n    const agent = new https.Agent({\n      rejectUnauthorized: false\n    });\n    axios({ method: 'post', url: \"http://localhost:5000/upload\", httpsAgent: agent, data: formData })\n      .then(res => {\n        console.log(res.data)\n        this.props.setRipe(res.data)\n      })\n      .catch(err => console.warn(err));\n\n  }\n\n  uploadFile(e) {\n    e.preventDefault();\n    let file = this.state.fileToBeSent;\n    const formData = new FormData();\n\n    formData.append(\"file\", file);\n\n    axios\n      .post(\"/api/upload\", formData)\n      .then(res => console.log(res))\n      .catch(err => console.warn(err));\n  }\n\n  _handleImageChange(e) {\n    e.preventDefault();\n    console.log('handle imageChange-', e.target.files[0]);\n    let reader = new FileReader()\n    let file = e.target.files[0]\n\n    reader.onloadend = () => {\n      this.setState({\n        file: file,\n        imagePreviewUrl: reader.result\n      })\n    }\n    reader.readAsDataURL(file)\n  }\n\n  _handleFindRipeness(e){\n    {this.props.loading()}\n    this._handleSubmit(e);\n    {this.props.loading()}\n  }\n\n  render() {\n    let { imagePreviewUrl } = this.state;\n    let $imagePreview = null\n    if (imagePreviewUrl) {\n      $imagePreview = (<img className=\"image\" src={imagePreviewUrl} alt=\"\" />)\n    } else {\n      $imagePreview = (<div className=\"previewText\">Please pick file to preview</div>)\n    }\n\n    return (\n      <div className=\"App\">\n        <div className=\"previewComponent\">\n          <form onSubmit={(e) => this._handleSubmit(e)}>\n            <input className=\"fileInput\"\n              style={{display:'none'}}\n              type=\"file\"\n              onChange={(e) => this._handleImageChange(e)}\n              ref={fileInput=>this.fileInput=fileInput} />\n            <button onClick={()=>this.fileInput.click()}>Pick File</button>\n\n            <button \n              type=\"submit\"\n              onClick={(e) => this._handleFindRipeness(e)}>Find Ripeness\n            </button>\n\n          </form>\n          <div className=\"imgPreview\">\n            {$imagePreview}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default IMG","import React, { Component } from 'react';\nimport './App.css';\nimport IMG from './ImageUploader/IMG';\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state={\n      mainText: \"boo\",\n      image: null,\n      loading: false,\n      ripeness: \"1\"\n    }\n    this.setLoading=this.setLoading.bind(this)\n      this.setRipeness=this.setRipeness.bind(this)\n  }\n\n  setRipeness=(num)=>{\n      this.setState({\n          ripeness: num\n      })\n  }\n\n  setLoading=()=>{\n    if(this.state.loading)\n      this.setState({ loading: false });\n    else\n      this.setState({ loading: true });\n    console.log(\"loading set\");\n  }\n\n  _loadingImage=()=>{\n    if(this.state.loading)\n      return(\n        <div className=\"nowLoading\">\n          <img className=\"gif\" src={require(\"./loading.gif\")}></img>\n        </div>\n      );\n  }\n\n  displayInformation=()=>{\n    if(this.state.ripeness===\"0\"){\n      return(\n      <div className=\"information\">\n        <div className=\"info\">\n            Banana Diagnosis: Unripe <br/>\n            Time until ripe: 3-4 days <br/>\n            To ripen your bananas faster, try baking them at 300 degrees Fahrenheit for 15-30 minutes. \n        </div>\n        <div className=\"info\">\n              Green bananas may provide some additional nutrients and benefits that yellow bananas do not.\n              They're rich in resistant starch and pectin, which are filling, improve digestive health and\n              help lower blood sugar levels. However, some people find that green bananas have a bitter taste\n              and bad texture.\n        </div>\n        <div className=\"info\">\n              If you want to eat your bananas now, try putting them into a smoothie. The other ingredients can\n              be used to balance out the flavor. \n        </div>\n      </div>\n      );\n    }\n    else if(this.state.ripeness===\"1\"){\n      return(\n      <div className=\"information\">\n        <div className=\"info\">\n            Banana Diagnosis: Ripe <br/>\n            Time until ripe: 3-4 days <br/>\n            To ripen your bananas faster, try baking them at 300 degrees Fahrenheit for 15-30 minutes.\n        </div>\n        <div className=\"info\">\n              Bananas are an excellent source of potassium!\n        </div>\n        <div className=\"info\">\n              Ripe bananas are great for eating straight or for chopping up to put in oatmeal.\n        </div>\n      </div>\n      );\n    }\n    else if(this.state.ripeness===\"2\"){\n      return(\n      <div className=\"information\">\n        <div className=\"info\">\n            Banana Diagnosis: Overripe <br/>\n            Time until rotten: 3-4 days <br/>\n            To slow the ripening process, try wrapping the connecting end of the banana with plastic wrap.\n        </div>\n        <div className=\"info\">\n            As a banana ripens, the starchy carbohydrates in them convert into free sugars, thus making\n            these bananas easy to digest, according to dailysuperfoodlove.com. Green bananas, on the other\n            hand, contain starches that are hard to digest.\n        </div>\n        <div className=\"info\">\n              If your banana is overripe, try making banana bread!\n        </div>\n      </div>\n      );\n    }\n  }\n  \n  render() {\n    return (\n      <div className=\"entireThing\">\n        <div className=\"theTop\">\n          <img src={require('./peel.png')} className=\"logo\"/> <h1>Appeal</h1>\n        </div>\n        {this._loadingImage()}\n      <div className=\"body\">\n          <IMG loading={this.setLoading} setRipe={this.setRipeness}/>\n          {this.displayInformation()}\n      </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}